// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: imgKeeper/imgKeeper.proto

package imgKeeperv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImgKeeperClient is the client API for ImgKeeper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImgKeeperClient interface {
	UploadImg(ctx context.Context, opts ...grpc.CallOption) (ImgKeeper_UploadImgClient, error)
	DownloadImg(ctx context.Context, in *ImgDownloadReq, opts ...grpc.CallOption) (ImgKeeper_DownloadImgClient, error)
	ImgList(ctx context.Context, in *ImgListReq, opts ...grpc.CallOption) (ImgKeeper_ImgListClient, error)
}

type imgKeeperClient struct {
	cc grpc.ClientConnInterface
}

func NewImgKeeperClient(cc grpc.ClientConnInterface) ImgKeeperClient {
	return &imgKeeperClient{cc}
}

func (c *imgKeeperClient) UploadImg(ctx context.Context, opts ...grpc.CallOption) (ImgKeeper_UploadImgClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImgKeeper_ServiceDesc.Streams[0], "/imgKeeper.ImgKeeper/UploadImg", opts...)
	if err != nil {
		return nil, err
	}
	x := &imgKeeperUploadImgClient{stream}
	return x, nil
}

type ImgKeeper_UploadImgClient interface {
	Send(*ImgUploadReq) error
	CloseAndRecv() (*ImgUploadRes, error)
	grpc.ClientStream
}

type imgKeeperUploadImgClient struct {
	grpc.ClientStream
}

func (x *imgKeeperUploadImgClient) Send(m *ImgUploadReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *imgKeeperUploadImgClient) CloseAndRecv() (*ImgUploadRes, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ImgUploadRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *imgKeeperClient) DownloadImg(ctx context.Context, in *ImgDownloadReq, opts ...grpc.CallOption) (ImgKeeper_DownloadImgClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImgKeeper_ServiceDesc.Streams[1], "/imgKeeper.ImgKeeper/DownloadImg", opts...)
	if err != nil {
		return nil, err
	}
	x := &imgKeeperDownloadImgClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ImgKeeper_DownloadImgClient interface {
	Recv() (*ImgDownloadRes, error)
	grpc.ClientStream
}

type imgKeeperDownloadImgClient struct {
	grpc.ClientStream
}

func (x *imgKeeperDownloadImgClient) Recv() (*ImgDownloadRes, error) {
	m := new(ImgDownloadRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *imgKeeperClient) ImgList(ctx context.Context, in *ImgListReq, opts ...grpc.CallOption) (ImgKeeper_ImgListClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImgKeeper_ServiceDesc.Streams[2], "/imgKeeper.ImgKeeper/ImgList", opts...)
	if err != nil {
		return nil, err
	}
	x := &imgKeeperImgListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ImgKeeper_ImgListClient interface {
	Recv() (*ImgListRes, error)
	grpc.ClientStream
}

type imgKeeperImgListClient struct {
	grpc.ClientStream
}

func (x *imgKeeperImgListClient) Recv() (*ImgListRes, error) {
	m := new(ImgListRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ImgKeeperServer is the server API for ImgKeeper service.
// All implementations must embed UnimplementedImgKeeperServer
// for forward compatibility
type ImgKeeperServer interface {
	UploadImg(ImgKeeper_UploadImgServer) error
	DownloadImg(*ImgDownloadReq, ImgKeeper_DownloadImgServer) error
	ImgList(*ImgListReq, ImgKeeper_ImgListServer) error
	mustEmbedUnimplementedImgKeeperServer()
}

// UnimplementedImgKeeperServer must be embedded to have forward compatible implementations.
type UnimplementedImgKeeperServer struct {
}

func (UnimplementedImgKeeperServer) UploadImg(ImgKeeper_UploadImgServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadImg not implemented")
}
func (UnimplementedImgKeeperServer) DownloadImg(*ImgDownloadReq, ImgKeeper_DownloadImgServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadImg not implemented")
}
func (UnimplementedImgKeeperServer) ImgList(*ImgListReq, ImgKeeper_ImgListServer) error {
	return status.Errorf(codes.Unimplemented, "method ImgList not implemented")
}
func (UnimplementedImgKeeperServer) mustEmbedUnimplementedImgKeeperServer() {}

// UnsafeImgKeeperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImgKeeperServer will
// result in compilation errors.
type UnsafeImgKeeperServer interface {
	mustEmbedUnimplementedImgKeeperServer()
}

func RegisterImgKeeperServer(s grpc.ServiceRegistrar, srv ImgKeeperServer) {
	s.RegisterService(&ImgKeeper_ServiceDesc, srv)
}

func _ImgKeeper_UploadImg_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImgKeeperServer).UploadImg(&imgKeeperUploadImgServer{stream})
}

type ImgKeeper_UploadImgServer interface {
	SendAndClose(*ImgUploadRes) error
	Recv() (*ImgUploadReq, error)
	grpc.ServerStream
}

type imgKeeperUploadImgServer struct {
	grpc.ServerStream
}

func (x *imgKeeperUploadImgServer) SendAndClose(m *ImgUploadRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *imgKeeperUploadImgServer) Recv() (*ImgUploadReq, error) {
	m := new(ImgUploadReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ImgKeeper_DownloadImg_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ImgDownloadReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImgKeeperServer).DownloadImg(m, &imgKeeperDownloadImgServer{stream})
}

type ImgKeeper_DownloadImgServer interface {
	Send(*ImgDownloadRes) error
	grpc.ServerStream
}

type imgKeeperDownloadImgServer struct {
	grpc.ServerStream
}

func (x *imgKeeperDownloadImgServer) Send(m *ImgDownloadRes) error {
	return x.ServerStream.SendMsg(m)
}

func _ImgKeeper_ImgList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ImgListReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImgKeeperServer).ImgList(m, &imgKeeperImgListServer{stream})
}

type ImgKeeper_ImgListServer interface {
	Send(*ImgListRes) error
	grpc.ServerStream
}

type imgKeeperImgListServer struct {
	grpc.ServerStream
}

func (x *imgKeeperImgListServer) Send(m *ImgListRes) error {
	return x.ServerStream.SendMsg(m)
}

// ImgKeeper_ServiceDesc is the grpc.ServiceDesc for ImgKeeper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImgKeeper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imgKeeper.ImgKeeper",
	HandlerType: (*ImgKeeperServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadImg",
			Handler:       _ImgKeeper_UploadImg_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadImg",
			Handler:       _ImgKeeper_DownloadImg_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ImgList",
			Handler:       _ImgKeeper_ImgList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "imgKeeper/imgKeeper.proto",
}
